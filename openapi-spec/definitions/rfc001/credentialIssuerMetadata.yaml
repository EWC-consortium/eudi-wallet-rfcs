title: Credential Issuer Metadata
type: object
properties:
  credential_issuer:
    type: string
    description: REQUIRED. The Credential Issuer's identifier, as defined in Section 11.2.1.
  authorization_servers:
    type: string
    description: >
      OPTIONAL. Array of strings, where each string is an identifier of the OAuth 2.0 Authorization Server (as defined in [RFC8414]) the Credential Issuer relies on for authorization. 
      If this parameter is omitted, the entity providing the Credential Issuer is also acting as the Authorization Server, i.e., the Credential Issuer's identifier is used to obtain the Authorization Server metadata. 
      The actual OAuth 2.0 Authorization Server metadata is obtained from the oauth-authorization-server well-known location as defined in Section 3 of [RFC8414]. 
      When there are multiple entries in the array, the Wallet may be able to determine which Authorization Server to use by querying the metadata; for example, by examining the grant_types_supported values, the Wallet can filter the server to use based on the grant type it plans to use. 
      When the Wallet is using authorization_server parameter in the Credential Offer as a hint to determine which Authorization Server to use out of multiple, the Wallet MUST NOT proceed with the flow if the authorization_server Credential Offer parameter value does not match any of the entries in the authorization_servers array.
  credential_endpoint:
    type: string
    description: REQUIRED. URL of the Credential Issuer's Credential Endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components.
  deferred_credential_endpoint:
    type: string
    description: OPTIONAL. URL of the Credential Issuer's Deferred Credential Endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components. If omitted, the Credential Issuer does not support the Deferred Credential Endpoint.
  batch_credential_endpoint:
    type: string
    description: OPTIONAL. URL of the Credential Issuer's Batch Credential Endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components. If omitted, the Credential Issuer does not support the Batch Credential Endpoint.
  notification_endpoint:
    type: string
    description: OPTIONAL. URL of the Credential Issuer's Notification Endpoint. This URL MUST use the https scheme and MAY contain port, path, and query parameter components. If omitted, the Credential Issuer does not support the Notification Endpoint.
  credential_response_encryption:
    type: object
    description: OPTIONAL. Object containing information about whether the Credential Issuer supports encryption of the Credential and Batch Credential Response on top of TLS.
    properties:
      alg_values_supported:
        type: array
        description: >
          REQUIRED. Array containing a list of the JWE [RFC7516] encryption algorithms (alg values) [RFC7518] supported by the Credential and Batch Credential Endpoint to encode the Credential or Batch Credential Response in a JWT [RFC7519].
        items:
          type: string
      enc_values_supported:
        description: >
          REQUIRED. Array containing a list of the JWE [RFC7516] encryption algorithms (enc values) [RFC7518] supported by the Credential and Batch Credential Endpoint to encode the Credential or Batch Credential Response in a JWT [RFC7519].
        type: array
        items:
          type: string
      encryption_required:
        description: >
          REQUIRED. Boolean value specifying whether the Credential Issuer requires the additional encryption on top of TLS for the Credential Response. 
          If the value is true, the Credential Issuer requires encryption for every Credential Response and therefore the Wallet MUST provide encryption keys in the Credential Request. 
          If the value is false, the Wallet MAY chose whether it provides encryption keys or not.
        type: boolean

  display:
    type: array
    description: OPTIONAL. Array of objects, where each object contains display properties of a Credential Issuer for a certain language.
    items:
      type: object
      properties:
        name:
          type: string
          description: OPTIONAL. String value of a display name for the Credential Issuer.
        locale:
          type: string
          description: String value that identifies the language of this object represented as a language tag taken from values defined in BCP47 [RFC5646]. There MUST be only one object for each language identifier.
        logo:
          type: object
          description: OPTIONAL. Object with information about the logo of the Credential Issuer.
          properties:
            uri:
              type: string
              description: >
                REQUIRED. String value that contains a URI where the Wallet can obtain the logo of the Credential Issuer. The Wallet needs to determine the scheme, since the URI value could use the https: scheme, the data: scheme, etc.
            alt_text:
              type: string
              description: >
                OPTIONAL. String value of the alternative text for the logo image.
          required:
            - uri
            - alt_text
  credential_identifiers_supported:
    type: boolean
    description: >
      OPTIONAL. Boolean value specifying whether the Credential Issuer supports returning credential_identifiers parameter in the authorization_details Token Response parameter, with true indicating support. 
      If omitted, the default value is false.
  signed_metadata:
    type: string
    description: >
      OPTIONAL. String that is a signed JWT. 
      This JWT contains Credential Issuer metadata parameters as claims. 
      The signed metadata MUST be secured using JSON Web Signature (JWS) [RFC7515] and MUST contain an iat (Issued At) claim, an iss (Issuer) claim denoting the party attesting to the claims in the signed metadata, and sub (Subject) claim matching the Credential Issuer identifier. 
      If the Wallet supports signed metadata, metadata values conveyed in the signed JWT MUST take precedence over the corresponding values conveyed using plain JSON elements. 
      If the Credential Issuer wants to enforce use of signed metadata, it omits the respective metadata parameters from the unsigned part of the Credential Issuer metadata. 
      A signed_metadata metadata value MUST NOT appear as a claim in the JWT. 
      The Wallet MUST establish trust in the signer of the metadata, and obtain the keys to validate the signature before processing the metadata. 
      The concrete mechanism how to do that is out of scope of this specification and MAY be defined in the profiles of this specification.
  credential_configurations_supported:
    oneOf:
      - $ref: "../../definitions/rfc001/jwtVcJsonCredentialConfiguration.yaml"
      - $ref: "../../definitions/rfc001/ietfSdJwtVcCredentialConfiguration.yaml"
      - $ref: "../../definitions/rfc001/msoMdocCredentialConfiguration.yaml"
required:
  - credential_issuer
  - authorization_servers
  - credential_endpoint
  - credential_configurations_supported
